# 1 "POLYBENCH_GEMM_OMP.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 795 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "POLYBENCH_GEMM_OMP.cpp" 2


# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h" 1
# 35 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stdarg.h" 1 3
# 14 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stdarg.h" 3
typedef __builtin_va_list va_list;
# 32 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 36 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h" 2
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 35 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 3
typedef int ptrdiff_t;
# 46 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 3
typedef unsigned int size_t;
# 102 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 3
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/__stddef_max_align_t.h" 1 3
# 19 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 103 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 2 3
# 37 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h" 2



extern "C" {
# 49 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
void _putchar(char character);
# 61 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
int printf_(const char* format, ...);
# 72 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
int sprintf_(char* buffer, const char* format, ...);
# 87 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
int snprintf_(char* buffer, size_t count, const char* format, ...);
int vsnprintf_(char* buffer, size_t count, const char* format, va_list va);
# 98 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
int vprintf_(const char* format, va_list va);
# 109 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/printf.h"
int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...);



}
# 4 "POLYBENCH_GEMM_OMP.cpp" 2
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h" 1






# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 1 3
# 12 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 1 3







# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/features.h" 1 3
# 25 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/features.h" 3
extern "C" {


# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/_newlib_version.h" 1 3
# 29 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/features.h" 2 3
# 535 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/features.h" 3
}
# 9 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 2 3
# 37 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef short __int16_t;

typedef unsigned short __uint16_t;
# 77 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef int __int32_t;

typedef unsigned int __uint32_t;
# 103 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef short __int_least16_t;

typedef unsigned short __uint_least16_t;
# 182 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef int __int_least32_t;

typedef unsigned int __uint_least32_t;
# 200 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 247 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_default_types.h" 3
}
# 13 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_intsup.h" 1 3
# 14 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_stdint.h" 1 3
# 15 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_stdint.h" 3
extern "C" {




typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;




}
# 15 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 2 3


extern "C" {



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 3
  typedef signed char int_fast8_t;
  typedef unsigned char uint_fast8_t;
# 61 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 3
  typedef short int_fast16_t;
  typedef unsigned short uint_fast16_t;
# 71 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 3
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 3
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 463 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdint.h" 3
}
# 8 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h" 2

# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/sync_teams.h" 1




# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h" 1





# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 7 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h" 2


# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/vendor/riscv-opcodes/encoding.h" 1
# 10 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h" 2


extern "C" {
# 34 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h"
inline static void *snrt_memset(void *ptr, int value, size_t num) {
    for (uint32_t i = 0; i < num; ++i)
        *((uint8_t *)ptr + i) = (unsigned char)value;
    return ptr;
}


typedef struct snrt_slice {
    uint64_t start;
    uint64_t end;
} snrt_slice_t;


struct snrt_peripherals {
    volatile uint32_t *wakeup;
    uint32_t *perf_counters;




    volatile uint32_t *cl_clint;
};


struct snrt_barrier {
    uint32_t volatile barrier;
    uint32_t volatile barrier_iteration;
};

static inline size_t snrt_slice_len(snrt_slice_t s) { return s.end - s.start; }

extern void snrt_cluster_hw_barrier();
extern void snrt_cluster_sw_barrier();
extern void snrt_global_barrier();
extern void snrt_barrier(struct snrt_barrier *barr, uint32_t n);

static inline uint32_t __attribute__((pure)) snrt_hartid();
struct snrt_team_root *snrt_current_team();
extern struct snrt_peripherals *snrt_peripherals();
extern uint32_t snrt_global_core_base_hartid();
extern uint32_t snrt_global_core_idx();
extern uint32_t snrt_global_core_num();
extern uint32_t snrt_global_compute_core_idx();
extern uint32_t snrt_global_compute_core_num();
extern uint32_t snrt_global_dm_core_idx();
extern uint32_t snrt_global_dm_core_num();
extern uint32_t snrt_cluster_core_base_hartid();
extern uint32_t snrt_cluster_core_idx();
extern uint32_t snrt_cluster_core_num();
extern uint32_t snrt_cluster_compute_core_idx();
extern uint32_t snrt_cluster_compute_core_num();
extern uint32_t snrt_cluster_dm_core_idx();
extern uint32_t snrt_cluster_dm_core_num();
extern uint32_t snrt_cluster_idx();
extern uint32_t snrt_cluster_num();
extern int snrt_is_compute_core();
extern int snrt_is_dm_core();
extern void snrt_wakeup(uint32_t mask);


extern snrt_slice_t snrt_global_memory();

extern snrt_slice_t snrt_cluster_memory();

extern void snrt_bcast_send(void *data, size_t len);
extern void snrt_bcast_recv(void *data, size_t len);

extern void *snrt_memcpy(void *dst, const void *src, size_t n);



typedef uint32_t snrt_dma_txid_t;

extern snrt_dma_txid_t snrt_dma_start_1d_wideptr(uint64_t dst, uint64_t src,
                                                 size_t size);

extern snrt_dma_txid_t snrt_dma_start_1d(void *dst, const void *src,
                                         size_t size);

extern snrt_dma_txid_t snrt_dma_start_2d_wideptr(uint64_t dst, uint64_t src,
                                                 size_t size, size_t dst_stride,
                                                 size_t src_stride,
                                                 size_t repeat);

extern snrt_dma_txid_t snrt_dma_start_2d(void *dst, const void *src,
                                         size_t size, size_t dst_stride,
                                         size_t src_stride, size_t repeat);

extern void snrt_dma_wait(snrt_dma_txid_t tid);

extern void snrt_dma_wait_all();






static inline __attribute__((noreturn)) void snrt_exit(int status) {
    (void)status;
    while (1)
        ;
}





static inline uint32_t __attribute__((pure)) snrt_hartid() {
    uint32_t hartid;
    asm("csrr %0, mhartid" : "=r"(hartid));
    return hartid;
}




extern void snrt_alloc_init(struct snrt_team_root *team, uint32_t l3off);
extern void *snrt_l1alloc(size_t size);
extern void *snrt_l3alloc(size_t size);
# 161 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h"
void snrt_int_init(struct snrt_team_root *team);







static inline void snrt_interrupt_global_enable(void) {
    ({ unsigned long __tmp; asm volatile ("csrrs %0, " "mstatus" ", %1" : "=r"(__tmp) : "rK"(0x00000008)); __tmp; });
}




static inline void snrt_interrupt_global_disable(void) {
    ({ unsigned long __tmp; asm volatile ("csrrc %0, " "mstatus" ", %1" : "=r"(__tmp) : "rK"(0x00000008)); __tmp; });
}
# 187 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h"
static inline void snrt_interrupt_enable(uint32_t irq) {
    ({ unsigned long __tmp; asm volatile ("csrrs %0, " "mie" ", %1" : "=r"(__tmp) : "rK"(1 << irq)); __tmp; });
}






static inline void snrt_interrupt_disable(uint32_t irq) {
    ({ unsigned long __tmp; asm volatile ("csrrc %0, " "mie" ", %1" : "=r"(__tmp) : "rK"(1 << irq)); __tmp; });
}





static inline uint32_t snrt_interrupt_cause(void) {
    return ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcause" : "=r"(__tmp)); __tmp; }) & ~0x80000000;
}
extern void snrt_int_sw_clear(uint32_t hartid);
extern void snrt_int_sw_set(uint32_t hartid);
extern uint32_t snrt_int_sw_get(uint32_t hartid);
extern void snrt_int_clint_set(uint32_t reg_off, uint32_t mask);
extern void snrt_int_sw_poll(void);
extern void snrt_int_cluster_clr(uint32_t mask);
extern void snrt_int_cluster_set(uint32_t mask);





static inline void snrt_wfi() { asm volatile("wfi"); }
# 229 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h"
static inline void snrt_mutex_lock(volatile uint32_t *pmtx) {
    asm volatile(
        "li            t0,1          # t0 = 1\n"
        "1:\n"
        "  amoswap.w.aq  t0,t0,(%0)   # t0 = oldlock & lock = 1\n"
        "  bnez          t0,1b      # Retry if previously set)\n"
        : "+r"(pmtx)
        :
        : "t0");
}






static inline void snrt_mutex_ttas_lock(volatile uint32_t *pmtx) {
    asm volatile(
        "1:\n"
        "  lw t0, 0(%0)\n"
        "  bnez t0, 1b\n"
        "  li t0,1          # t0 = 1\n"
        "2:\n"
        "  amoswap.w.aq  t0,t0,(%0)   # t0 = oldlock & lock = 1\n"
        "  bnez          t0,2b      # Retry if previously set)\n"
        : "+r"(pmtx)
        :
        : "t0");
}




static inline void snrt_mutex_release(volatile uint32_t *pmtx) {
    asm volatile("amoswap.w.rl  x0,x0,(%0)   # Release lock by storing 0\n"
                 : "+r"(pmtx));
}
# 290 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/snrt.h"
}
# 6 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/sync_teams.h" 2





void teams_init(void);





void teams_exit(uint32_t global_core_idx);






void teams_event_loop(uint32_t global_core_idx);
# 35 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/sync_teams.h"
int teams_dispatch_push(void (*fn)(void *, uint32_t), uint32_t argc, void *data,
                     uint32_t nteams);





void teams_run_empty(uint32_t global_core_idx);




void teams_mutex_lock();




void teams_mutex_release();




uint32_t teams_get_workers_in_loop();
uint32_t teams_get_workers_in_wfi();
# 10 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h" 2
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/eu.h" 1
# 15 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/eu.h"
void eu_init(void);





void eu_exit(uint32_t core_idx);






void eu_event_loop(uint32_t cluster_core_idx);
# 39 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/eu.h"
int eu_dispatch_push(void (*fn)(void *, uint32_t), uint32_t argc, void *data,
                     uint32_t nthreads);





void eu_run_empty(uint32_t core_idx);





void eu_print_status();




void eu_mutex_lock();




void eu_mutex_release();




uint32_t eu_get_workers_in_loop();
uint32_t eu_get_workers_in_wfi();
# 11 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h" 2
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/kmp.h" 1







# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/interface.h" 1
# 21 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/interface.h"
typedef int32_t kmp_int32;
typedef uint32_t kmp_uint32;
typedef int64_t kmp_int64;
typedef uint64_t kmp_uint64;
typedef kmp_uint64 _kmp_ptr64;
typedef kmp_uint32 _kmp_ptr32;

typedef struct ident {
    kmp_int32 reserved_1;
    kmp_int32 flags;

    kmp_int32
        reserved_2;
    kmp_int32 reserved_3;
    char const *psource;



} ident_t;





enum sched_type : kmp_int32 {
    kmp_sch_lower = 32,
    kmp_sch_static_chunked = 33,
    kmp_sch_static = 34,
    kmp_sch_dynamic_chunked = 35,
    kmp_sch_guided_chunked = 36,
    kmp_sch_runtime = 37,
    kmp_sch_auto = 38,
    kmp_sch_trapezoidal = 39,


    kmp_sch_static_greedy = 40,
    kmp_sch_static_balanced = 41,

    kmp_sch_guided_iterative_chunked = 42,
    kmp_sch_guided_analytical_chunked = 43,

    kmp_sch_static_steal = 44,


    kmp_sch_static_balanced_chunked = 45,
    kmp_sch_guided_simd = 46,
    kmp_sch_runtime_simd = 47,


    kmp_sch_upper,

    kmp_ord_lower =
        64,
    kmp_ord_static_chunked = 65,
    kmp_ord_static = 66,
    kmp_ord_dynamic_chunked = 67,
    kmp_ord_guided_chunked = 68,
    kmp_ord_runtime = 69,
    kmp_ord_auto = 70,
    kmp_ord_trapezoidal = 71,
    kmp_ord_upper,


    kmp_distribute_static_chunked = 91,
    kmp_distribute_static = 92,





    kmp_nm_lower = 160,

    kmp_nm_static_chunked =
        (kmp_sch_static_chunked - kmp_sch_lower + kmp_nm_lower),
    kmp_nm_static = 162,
    kmp_nm_dynamic_chunked = 163,
    kmp_nm_guided_chunked = 164,
    kmp_nm_runtime = 165,
    kmp_nm_auto = 166,
    kmp_nm_trapezoidal = 167,


    kmp_nm_static_greedy = 168,
    kmp_nm_static_balanced = 169,

    kmp_nm_guided_iterative_chunked = 170,
    kmp_nm_guided_analytical_chunked = 171,
    kmp_nm_static_steal =
        172,

    kmp_nm_ord_static_chunked = 193,
    kmp_nm_ord_static = 194,
    kmp_nm_ord_dynamic_chunked = 195,
    kmp_nm_ord_guided_chunked = 196,
    kmp_nm_ord_runtime = 197,
    kmp_nm_ord_auto = 198,
    kmp_nm_ord_trapezoidal = 199,
    kmp_nm_upper,
# 134 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/interface.h"
    kmp_sch_modifier_monotonic =
        (1 << 29),
    kmp_sch_modifier_nonmonotonic =
        (1 << 30),
# 154 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/interface.h"
    kmp_sch_default = kmp_sch_static
};
# 9 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/kmp.h" 2




typedef void (*kmpc_micro)(kmp_int32 *global_tid, kmp_int32 *bound_tid, ...);
# 12 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h" 2
# 60 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h"
typedef struct {
    char nbThreads;

    int loop_epoch;
    int loop_start;
    int loop_end;
    int loop_incr;
    int loop_chunk;
    int loop_is_setup;
    int core_epoch[16];

} omp_team_t;


typedef struct {

    omp_team_t plainTeam;
    int numThreads;
    int maxThreads;
    int numTeams;
    int maxTeams;
    int teamId;
# 92 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h"
    struct snrt_barrier *kmpc_barrier;






    _kmp_ptr32 kmpc_args[12];

} omp_t;


typedef struct {
    uint32_t fork_oh;
} omp_prof_t;
extern omp_prof_t *omp_prof;



extern __thread omp_t volatile *omp_p;
# 120 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/snRuntime/include/omp.h"
void omp_init(void);
unsigned snrt_omp_bootstrap(uint32_t core_idx);
void partialParallelRegion(int32_t argc, void *data,
                           void (*fn)(void *, uint32_t), int num_threads);


void omp_print_prof(void);
extern omp_prof_t *omp_prof;







static inline omp_t *omp_getData() { return (__attribute__((address_space(1))) omp_t*) omp_p; }
static inline omp_team_t *omp_get_team(omp_t *_this) {
    return &_this->plainTeam;
}







static inline unsigned omp_get_thread_num(void) {
    return snrt_cluster_core_idx();
}

static inline unsigned omp_get_team_num(void) {
    return snrt_cluster_idx();
}

static inline void __attribute__((always_inline))
parallelRegionExec(int32_t argc, void *data, void (*fn)(void *, uint32_t),
                   int num_threads) {

    (void)eu_dispatch_push(fn, argc, data, num_threads);

    eu_run_empty(snrt_cluster_core_idx());
}

static inline void __attribute__((always_inline))
parallelRegion(int32_t argc, void *data, void (*fn)(void *, uint32_t),
               int num_threads) {
    partialParallelRegion(argc, data, fn, num_threads);
}

static inline void __attribute__((always_inline))
mastersParallelRegion(int32_t argc, void *data, void (*fn)(void *, uint32_t), int num_teams) {


    (void)teams_dispatch_push(fn, argc, data, num_teams);

    teams_run_empty(snrt_global_core_idx());
}
# 5 "POLYBENCH_GEMM_OMP.cpp" 2




# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/spatzBenchmarks/omptarget/io.h" 1
# 18 "/scratch2/msc24h6/RAJAPerf/../hero-tools/platforms/carfield/spatz/sw/spatzBenchmarks/omptarget/io.h"
static inline void writeb(uint8_t val, uintptr_t addr)
{
 asm volatile("sb %0, 0(%1)"
       :
       : "r"(val), "r"((volatile uint8_t *)addr)
       : "memory");
}

static inline void writeh(uint16_t val, uintptr_t addr)
{
 asm volatile("sh %0, 0(%1)"
       :
       : "r"(val), "r"((volatile uint16_t *)addr)
       : "memory");
}

static inline void writew(uint32_t val, uintptr_t addr)
{
 asm volatile("sw %0, 0(%1)"
       :
       : "r"(val), "r"((volatile uint32_t *)addr)
       : "memory");
}

static inline void writed(uint64_t val, uintptr_t addr)
{
 asm volatile("sd %0, 0(%1)"
       :
       : "r"(val), "r"((volatile uint64_t *)addr)
       : "memory");
}


static inline uint8_t readb(const uintptr_t addr)
{
 uint8_t val;

 asm volatile("lb %0, 0(%1)"
       : "=r"(val)
       : "r"((const volatile uint8_t *)addr)
       : "memory");
 return val;
}

static inline uint16_t readh(const uintptr_t addr)
{
 uint16_t val;

 asm volatile("lh %0, 0(%1)"
       : "=r"(val)
       : "r"((const volatile uint16_t *)addr)
       : "memory");
 return val;
}

static inline uint32_t readw(const uintptr_t addr)
{
 uint32_t val;

 asm volatile("lw %0, 0(%1)"
       : "=r"(val)
       : "r"((const volatile uint32_t *)addr)
       : "memory");
 return val;
}

static inline uint64_t readd(const uintptr_t addr)
{
 uint64_t val;

 asm volatile("ld %0, 0(%1)"
       : "=r"(val)
       : "r"((const volatile uint64_t *)addr)
       : "memory");
 return val;
}
# 10 "POLYBENCH_GEMM_OMP.cpp" 2
# 1 "./kernels/dp_gemm.hpp" 1




void gemm_4xVL(double *c, const double *a, const double *b,
                 const unsigned int m_start, const unsigned int m_end,
                 const unsigned int N, const unsigned int P,
                 const double alpha, const double beta, const uint32_t first_iter) {


    unsigned int p = 0;
    const unsigned int P_striding = P*sizeof(double);
    const unsigned int N_striding = N*sizeof(double);
    while (p < P) {

        size_t gvl;
        asm volatile("vsetvli %[gvl], %[vl], e64, m4, ta, ma"
                    : [gvl] "=r"(gvl)
                    : [vl] "r"(P - p));

        const double *b_ = b + p;
        double *c_ = c + p;

        for (unsigned int m = m_start; m < m_end; m += 4) {
            const double *a_ = a + m * N;
            const double *a__ = a_;

            asm volatile("vle64.v v16, (%0);" ::"r"(b_));
            const double *b__;

            asm volatile("add %0, %1, %2" : "+r"( b__) :"r"( b_), "r"(P_striding));

            double *c__ = c_ + m * P;


            double t0, t1, t2, t3;


            asm volatile( "fld   %[t0], (%[a__])              \n"
                            "add   %[a__], %[a__], %[N_striding]\n"
                            "fld    %[t1], (%[a__])             \n"
                            "add   %[a__], %[a__], %[N_striding]\n"
                            "fld    %[t2], (%[a__])             \n"
                            "add   %[a__], %[a__], %[N_striding]\n"
                            "fld    %[t3], (%[a__])             \n"
                    : [t0] "+f"(t0), [t1] "+f"(t1),[t2] "+f"(t2), [t3] "+f"(t3), [a__] "+r"(a__)
                    : [N_striding]"r"(N_striding)
            );


            unsigned int n = 0;

            while (n < N_striding) {

                asm volatile("addi %[n], %[n], %[incr]\n"
                            "add %[a__], %[a_], %[n]\n"
                    : [n] "+r"(n), [a__] "+r"(a__)
                    : [incr]"i"(sizeof(double)), [a_]"r"(a_)
                );


                asm volatile("vle64.v v20, (%0);" ::"r"(b__));

                asm volatile("add %0, %0, %1" : "+r"( b__) : "r"(P_striding));


                if (n == sizeof(double)) {

                    asm volatile( "vfmul.vf v0, v16, %[t0]            \n"
                                    "fld    %[t0], (%[a__])             \n"
                                    "add   %[a__], %[a__], %[N_striding]\n"
                                    "vfmul.vf v4, v16, %[t1]            \n"
                                    "fld    %[t1], (%[a__])             \n"
                                    "add   %[a__], %[a__], %[N_striding]\n"
                                    "vfmul.vf v8, v16, %[t2]            \n"
                                    "fld    %[t2], (%[a__])             \n"
                                    "add   %[a__], %[a__], %[N_striding]\n"
                                    "vfmul.vf v12, v16, %[t3]           \n"
                                    "fld    %[t3], (%[a__])             \n"

                        : [t0] "+f"(t0), [t1] "+f"(t1),[t2] "+f"(t2), [t3] "+f"(t3), [a__] "+r"(a__)
                        : [N_striding] "r"(N_striding)
                    );



                } else {

                    asm volatile( "vfmacc.vf v0, %[t0], v16           \n"
                                    "fld    %[t0], (%[a__])             \n"
                                    "add   %[a__], %[a__], %[N_striding]\n"
                                    "vfmacc.vf v4, %[t1], v16           \n"
                                    "fld    %[t1], (%[a__])             \n"
                                    "add   %[a__], %[a__], %[N_striding]\n"
                                    "vfmacc.vf v8, %[t2], v16           \n"
                                    "fld    %[t2], (%[a__])             \n"
                                    "add   %[a__], %[a__], %[N_striding]\n"
                                    "vfmacc.vf v12, %[t3], v16          \n"
                                    "fld    %[t3], (%[a__])             \n"

                        : [t0] "+f"(t0), [t1] "+f"(t1),[t2] "+f"(t2), [t3] "+f"(t3), [a__] "+r"(a__)
                        : [N_striding] "r"(N_striding)
                    );
                }


                asm volatile("addi %[n], %[n], %[incr]\n"
                            "add %[a__], %[a_], %[n]\n"
                    : [n] "+r"(n), [a__] "+r"(a__)
                    : [incr]"i"(sizeof(double)), [a_]"r"(a_)
                );

                if (n == N_striding)
                    break;

                asm volatile("vle64.v v16, (%0);" ::"r"(b__));

                asm volatile("add %0, %0, %1" : "+r"( b__) : "r"(P_striding));

                asm volatile( "vfmacc.vf v0, %[t0], v20           \n"
                                "fld    %[t0], (%[a__])             \n"
                                "add   %[a__], %[a__], %[N_striding]\n"
                                "vfmacc.vf v4, %[t1], v20           \n"
                                "fld    %[t1], (%[a__])             \n"
                                "add   %[a__], %[a__], %[N_striding]\n"
                                "vfmacc.vf v8, %[t2], v20           \n"
                                "fld    %[t2], (%[a__])             \n"
                                "add   %[a__], %[a__], %[N_striding]\n"
                                "vfmacc.vf v12, %[t3], v20          \n"
                                "fld    %[t3], (%[a__])             \n"

                    : [t0] "+f"(t0), [t1] "+f"(t1),[t2] "+f"(t2), [t3] "+f"(t3), [a__] "+r"(a__)
                    : [N_striding] "r"(N_striding)
                );
            }






            asm volatile("vfmacc.vf v0, %0, v20" ::"f"(t0));
            asm volatile("vfmacc.vf v4, %0, v20" ::"f"(t1));
            asm volatile("vfmacc.vf v8, %0, v20" ::"f"(t2));
            asm volatile("vfmacc.vf v12, %0, v20" ::"f"(t3));

            double *c___ = c__;


            asm volatile( "vle64.v v16, (%[c])            \n"
                            "add %[c], %[c], %[P]           \n"
                            "vfmul.vf v0, v0, %[alpha]      \n"
                            "vle64.v v20, (%[c])            \n"
                            "add %[c], %[c], %[P]           \n"
                            "vfmul.vf v4, v4, %[alpha]      \n"
                            "vle64.v v24, (%[c])            \n"
                            "add %[c], %[c], %[P]           \n"
                            "vfmul.vf v8, v8, %[alpha]      \n"
                            "vle64.v v28, (%[c])            \n"
                            "vfmul.vf v12, v12, %[alpha]    \n"

            :[c]"+r"(c___)
            :[alpha]"f"(alpha), [P]"r"(P_striding) );


            if(first_iter==1){

                asm volatile( "vfmul.vf v16, v16, %[beta] \n"
                                "vfmul.vf v20, v20, %[beta] \n"
                                "vfmul.vf v24, v24, %[beta] \n"
                                "vfmul.vf v28, v28, %[beta] \n"

                                "vfadd.vv v0, v0, v16       \n"
                                "vse64.v v0, (%[c])         \n"
                                "add %[c], %[c], %[P]       \n"

                                "vfadd.vv v4, v4, v20       \n"
                                "vse64.v v4, (%[c])         \n"
                                "add %[c], %[c], %[P]       \n"

                                "vfadd.vv v8, v8, v24       \n"
                                "vse64.v v8, (%[c])         \n"
                                "add %[c], %[c], %[P]       \n"

                                "vfadd.vv v12, v12, v28     \n"
                                "vse64.v v12, (%[c])        \n"
                : [c]"+r"(c__)
                :[beta] "f"(beta), [P]"r"(P_striding)
                );

            }else{

                asm volatile(
                                "vfadd.vv v0, v0, v16       \n"
                                "vse64.v v0, (%[c])         \n"
                                "add %[c], %[c], %[P]       \n"

                                "vfadd.vv v4, v4, v20       \n"
                                "vse64.v v4, (%[c])         \n"
                                "add %[c], %[c], %[P]       \n"

                                "vfadd.vv v8, v8, v24       \n"
                                "vse64.v v8, (%[c])         \n"
                                "add %[c], %[c], %[P]       \n"

                                "vfadd.vv v12, v12, v28     \n"
                                "vse64.v v12, (%[c])        \n"
                : [c]"+r"(c__)
                : [P]"r"(P_striding)
                );
            }

        }

        p += gvl;
    }
}
# 11 "POLYBENCH_GEMM_OMP.cpp" 2
# 23 "POLYBENCH_GEMM_OMP.cpp"
extern "C" {
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h" 1
# 45 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h"
inline static __attribute__((used)) uint64_t hero_load_uint64 (const uint64_t addr);
inline static __attribute__((used)) void hero_store_uint64 (const uint64_t addr,
                                                                         const uint64_t val);
inline static __attribute__((used)) int hero_load_uint64_noblock (const uint64_t addr,
                                                                         __attribute((address_space(0))) uint64_t* const val);
inline static __attribute__((used)) int hero_store_uint64_noblock (const uint64_t addr,
                                                                         const uint64_t val);
inline static __attribute__((used)) uint32_t hero_load_uint32 (const uint64_t addr);
inline static __attribute__((used)) void hero_store_uint32 (const uint64_t addr,
                                                                         const uint32_t val);
inline static __attribute__((used)) int hero_load_uint32_noblock (const uint64_t addr,
                                                                         __attribute((address_space(0))) uint32_t* const val);
inline static __attribute__((used)) int hero_store_uint32_noblock (const uint64_t addr,
                                                                         const uint32_t val);
inline static __attribute__((used)) uint16_t hero_load_uint16 (const uint64_t addr);
inline static __attribute__((used)) void hero_store_uint16 (const uint64_t addr,
                                                                         const uint16_t val);
inline static __attribute__((used)) int hero_load_uint16_noblock (const uint64_t addr,
                                                                         __attribute((address_space(0))) uint16_t* const val);
inline static __attribute__((used)) int hero_store_uint16_noblock (const uint64_t addr,
                                                                         const uint16_t val);
inline static __attribute__((used)) uint8_t hero_load_uint8 (const uint64_t addr);
inline static __attribute__((used)) void hero_store_uint8 (const uint64_t addr,
                                                                         const uint8_t val);
inline static __attribute__((used)) int hero_load_uint8_noblock (const uint64_t addr,
                                                                         __attribute((address_space(0))) uint8_t* const val);
inline static __attribute__((used)) int hero_store_uint8_noblock (const uint64_t addr,
                                                                         const uint8_t val);
# 86 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h"
#pragma clang diagnostic push

#pragma clang diagnostic ignored "-Wint-to-pointer-cast"

# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stdbool.h" 1 3
# 91 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h" 2
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 1 3
# 29 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/_ansi.h" 1 3
# 10 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/_ansi.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/newlib.h" 1 3
# 11 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/_ansi.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/config.h" 1 3



# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/ieeefp.h" 1 3
# 5 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/config.h" 2 3
# 12 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/_ansi.h" 2 3
# 30 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 2 3





# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/cdefs.h" 1 3
# 47 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/cdefs.h" 3
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 48 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/cdefs.h" 2 3
# 36 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 2 3
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 37 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 2 3
# 46 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
typedef __gnuc_va_list va_list;
# 60 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 1 3








extern "C" {




# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 15 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 1 3
# 24 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 3
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 116 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 3
typedef unsigned int wint_t;
# 25 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 2 3


# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_types.h" 1 3
# 28 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 90 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 131 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 3
typedef unsigned int __size_t;
# 147 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 158 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;





typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;







typedef __builtin_va_list __va_list;
# 16 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 34 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/lock.h" 1 3
# 11 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/lock.h" 3
typedef int _LOCK_T;
typedef int _LOCK_RECURSIVE_T;
# 35 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 2 3
typedef _LOCK_RECURSIVE_T _flock_t;







struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 98 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 122 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 186 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  _ssize_t (*_read) (struct _reent *, void *,
        char *, int);
  _ssize_t (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 292 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 324 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 613 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};
# 819 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 845 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/reent.h" 3
}
# 61 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 1 3
# 28 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef __intptr_t register_t;
# 49 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/endian.h" 1 3





# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/_endian.h" 1 3
# 7 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/endian.h" 2 3
# 50 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 1 3
# 14 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_sigset.h" 1 3
# 41 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_sigset.h" 3
typedef unsigned long __sigset_t;
# 15 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_timeval.h" 1 3
# 37 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef __int_least64_t time_t;
# 54 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 16 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/timespec.h" 1 3
# 38 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/timespec.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_timespec.h" 1 3
# 47 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/timespec.h" 2 3
# 58 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 17 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;
# 34 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 3
typedef unsigned long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 60 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/select.h" 3
extern "C" {

int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout);


int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set);




}
# 51 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;



typedef __uintptr_t u_register_t;






typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 119 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 157 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 220 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 3
typedef __int64_t sbintime_t;


# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_pthreadtypes.h" 1 3
# 23 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_pthreadtypes.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/sched.h" 1 3
# 27 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/sched.h" 3
extern "C" {
# 48 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/sched.h" 3
struct sched_param {
  int sched_priority;
# 61 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/sched.h" 3
};


}
# 24 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_pthreadtypes.h" 2 3








typedef __uint32_t pthread_t;
# 61 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_pthreadtypes.h" 3
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;





  int detachstate;
} pthread_attr_t;
# 154 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_pthreadtypes.h" 3
typedef __uint32_t pthread_mutex_t;

typedef struct {
  int is_initialized;
# 168 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_pthreadtypes.h" 3
  int recursive;
} pthread_mutexattr_t;






typedef __uint32_t pthread_cond_t;



typedef struct {
  int is_initialized;
  clock_t clock;



} pthread_condattr_t;



typedef __uint32_t pthread_key_t;

typedef struct {
  int is_initialized;
  int init_executed;
} pthread_once_t;
# 224 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 2 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/types.h" 1 3
# 225 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/types.h" 2 3
# 62 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 2 3

extern "C" {


typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/stdio.h" 1 3
# 80 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 2 3
# 181 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
char * ctermid (char *);


char * cuserid (char *);

FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int fscanf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int printf_ (const char *, ...)
               __attribute__ ((__format__ (__printf__, 1, 2)));
int scanf (const char *, ...)
               __attribute__ ((__format__ (__scanf__, 1, 2)));
int sscanf (const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int vfprintf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vprintf_ (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 1, 0)));
int vsprintf (char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void *, size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *, fpos_t *);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char * _name, const char * _type);
int sprintf_ (char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int remove (const char *);
int rename (const char *, const char *);
# 257 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello (FILE *);



int fcloseall (void);



int snprintf_ (char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int vsnprintf_ (char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int vfscanf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int vscanf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 1, 0)));
int vsscanf (const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));


int asprintf (char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int vasprintf (char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));


int asiprintf (char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
char * asniprintf (char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
char * asnprintf (char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));

int diprintf (int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));

int fiprintf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int fiscanf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int iprintf (const char *, ...)
               __attribute__ ((__format__ (__printf__, 1, 2)));
int iscanf (const char *, ...)
               __attribute__ ((__format__ (__scanf__, 1, 2)));
int siprintf (char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int siscanf (const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int sniprintf (char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int vasiprintf (char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int vdiprintf (int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vfiprintf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vfiscanf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int viprintf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 1, 0)));
int viscanf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 1, 0)));
int vsiprintf (char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vsiscanf (const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int vsniprintf (char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
# 339 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
int dprintf (int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));

FILE * fmemopen (void *, size_t, const char *);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));



int renameat (int, const char *, int, const char *);
# 396 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
int _asiprintf_r (struct _reent *, char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _asprintf_r (struct _reent *, char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _diprintf_r (struct _reent *, int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _dprintf_r (struct _reent *, int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);
char * _fgets_unlocked_r (struct _reent *, char *, int, FILE *);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fiscanf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
int _fputs_unlocked_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
size_t _fread_unlocked_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
size_t _fwrite_unlocked_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int _iscanf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *,
      const char *_old, const char *_new);
int _scanf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int _siprintf_r (struct _reent *, char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _siscanf_r (struct _reent *, const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _sprintf_r (struct _reent *, char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _sscanf_r (struct _reent *, const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void *, size_t _size, size_t _n, FILE *);
size_t fwrite_unlocked (const void * , size_t _size, size_t _n, FILE *);



char * fgets_unlocked (char *, int, FILE *);
int fputs_unlocked (const char *, FILE *);
# 577 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 601 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
FILE *funopen (const void *__cookie,
  int (*__readfn)(void *__cookie, char *__buf,
    int __n),
  int (*__writefn)(void *__cookie, const char *__buf,
     int __n),
  fpos_t (*__seekfn)(void *__cookie, fpos_t __off, int __whence),
  int (*__closefn)(void *__cookie));
FILE *_funopen_r (struct _reent *, const void *__cookie,
  int (*__readfn)(void *__cookie, char *__buf,
    int __n),
  int (*__writefn)(void *__cookie, const char *__buf,
     int __n),
  fpos_t (*__seekfn)(void *__cookie, fpos_t __off, int __whence),
  int (*__closefn)(void *__cookie));
# 624 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
     size_t __n);




typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);

typedef int cookie_close_function_t(void *__cookie);
typedef struct
{


  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie (void *__cookie,
  const char *__mode, cookie_io_functions_t __functions);
FILE *_fopencookie_r (struct _reent *, void *__cookie,
  const char *__mode, cookie_io_functions_t __functions);
# 687 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
extern __inline__ __attribute__ ((__always_inline__)) int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 797 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdio.h" 3
}
# 92 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h" 2
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/stdlib.h" 1
# 36 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/stdlib.h"
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 1
# 40 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 3

# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/c++config.h" 1 3
# 262 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 284 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 522 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/c++config.h" 3
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/os_defines.h" 1 3
# 39 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/os_defines.h" 3
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/features.h" 1 3
# 451 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/features.h" 3
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/stdc-predef.h" 1 3
# 452 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/features.h" 2 3
# 497 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/features.h" 3
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/gnu/stubs.h" 1 3




# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/bits/wordsize.h" 1 3
# 6 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/gnu/stubs.h" 2 3
# 17 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/gnu/stubs.h" 3
# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/gnu/stubs-lp64d.h" 1 3
# 18 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/gnu/stubs.h" 2 3
# 498 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/usr/include/features.h" 2 3
# 40 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/os_defines.h" 2 3
# 523 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/c++config.h" 2 3


# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/cpu_defines.h" 1 3
# 526 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/riscv64-buildroot-linux-gnu/bits/c++config.h" 2 3
# 42 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 2 3
# 75 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 1 3
# 10 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 3
# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/ieeefp.h" 1 3
# 11 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 2 3





# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 17 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 2 3



# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/machine/stdlib.h" 1 3
# 21 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 2 3

# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/alloca.h" 1 3
# 23 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 2 3







# 1 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/sys/_locale.h" 1 3








struct __locale_t;
typedef struct __locale_t *locale_t;
# 31 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 2 3


extern "C" {

typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void *calloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__))
      __attribute__((__alloc_size__(1, 2))) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);

char * secure_getenv (const char *__string);

char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);


int mkostemp (char *, int);
int mkostemps (char *, int, int);


int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2))) __attribute__ ((__nothrow__));

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2, 3)));
void *reallocf(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)));


char * realpath (const char * path, char * resolved_path);


int rpmatch (const char *response);


void setkey (const char *__key);

void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);

float strtof (const char * __n, char ** __end_PTR);







long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);


double strtod_l (const char *, char **, locale_t);
float strtof_l (const char *, char **, locale_t);

extern long double strtold_l (const char *, char **,
         locale_t);

long strtol_l (const char *, char **, int, locale_t);
unsigned long strtoul_l (const char *, char **, int,
    locale_t __loc);
long long strtoll_l (const char *, char **, int, locale_t);
unsigned long long strtoull_l (const char *, char **, int,
          locale_t __loc);


int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void *__arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 224 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);

unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int posix_memalign (void **, size_t, size_t) __attribute__((__nonnull__ (1)))
     __attribute__((__warn_unused_result__));


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);






void qsort_r (void *__base, size_t __nmemb, size_t __size, int (*_compar)(const void *, const void *, void *), void *__thunk);
# 322 "/scratch2/msc24h6/RAJAPerf/../hero-tools/install/rv32imafdvzfh-ilp32d/riscv32-unknown-elf/include/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *, char **);

extern long double strtold (const char *, char **);







void * aligned_alloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
int at_quick_exit(void (*)(void));
[[noreturn]] void
 quick_exit(int);


}
# 76 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 2 3

# 1 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/bits/std_abs.h" 1 3
# 34 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/bits/std_abs.h" 3
# 46 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 108 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/bits/std_abs.h" 3
}
}
# 78 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 2 3
# 121 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/scratch2/msc24h6/hero-tools/cva6-sdk/buildroot/output/host/riscv64-buildroot-linux-gnu/sysroot/../include/c++/10.3.0/stdlib.h" 2

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 93 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h" 2

inline static uint32_t __upper32(const uint64_t dw)
{
  return (uint32_t)(dw >> 32);
}

inline static uint32_t __lower32(const uint64_t dw)
{
  return (uint32_t)dw;
}

inline static void __loop_forever()
{
  while (1) {
    __asm__ volatile("nop" : : : );
  }
}
# 192 "/scratch2/msc24h6/RAJAPerf/../hero-tools/apps/carfield/omp/common/hero_64.h"
#pragma omp declare target
inline static int hero_load_uint32_noblock( const uint64_t addr, __attribute((address_space(0))) uint32_t* const val) { const uint32_t upper = __upper32(addr); __attribute((address_space(0))) volatile uint32_t* const lower = (__attribute((address_space(0))) volatile uint32_t*)__lower32(addr); uint32_t mstatus; uint32_t reg; __asm__ volatile( "csrrci %[mstatus], 0x300, 3" "\n\t" "csrw 0xbc0, zero\n\t" "l" "w" " %[reg], 0(%[lower])\n\t" "csrw 0xbc0, zero\n\t" "csrrw x0, 0x300, %[mstatus]" : [reg] "=&r" (reg), [mstatus] "+&r" (mstatus) : [upper] "r" (upper), [lower] "r" (lower) : "memory" ); *val = reg; return 0; } inline static uint32_t hero_load_uint32(const uint64_t addr) { uint32_t val; const int res = hero_load_uint32_noblock(addr, (__attribute((address_space(0))) uint32_t*)&val); return val; } inline static int hero_store_uint32_noblock( const uint64_t addr, const uint32_t val) { const uint32_t upper = __upper32(addr); __attribute((address_space(0))) volatile uint32_t* const lower = (__attribute((address_space(0))) volatile uint32_t*)__lower32(addr); uint32_t mstatus; __asm__ volatile( "csrrci %[mstatus], 0x300, 3" "\n\t" "csrw 0xbc0, zero\n\t" "s" "w" " %[val], 0(%[lower])\n\t" "csrw 0xbc0, zero\n\t" "csrrw x0, 0x300, %[mstatus]" : [mstatus] "+&r" (mstatus) : [upper] "r" (upper), [val] "r" (val), [lower] "r" (lower) : "memory" ); return 0; } inline static void hero_store_uint32 (const uint64_t addr, const uint32_t val) { const int res = hero_store_uint32_noblock(addr, val); }
inline static int hero_load_uint16_noblock( const uint64_t addr, __attribute((address_space(0))) uint16_t* const val) { const uint32_t upper = __upper32(addr); __attribute((address_space(0))) volatile uint16_t* const lower = (__attribute((address_space(0))) volatile uint16_t*)__lower32(addr); uint32_t mstatus; uint16_t reg; __asm__ volatile( "csrrci %[mstatus], 0x300, 3" "\n\t" "csrw 0xbc0, zero\n\t" "l" "h" "u" " %[reg], 0(%[lower])\n\t" "csrw 0xbc0, zero\n\t" "csrrw x0, 0x300, %[mstatus]" : [reg] "=&r" (reg), [mstatus] "+&r" (mstatus) : [upper] "r" (upper), [lower] "r" (lower) : "memory" ); *val = reg; return 0; } inline static uint16_t hero_load_uint16(const uint64_t addr) { uint16_t val; const int res = hero_load_uint16_noblock(addr, (__attribute((address_space(0))) uint16_t*)&val); return val; } inline static int hero_store_uint16_noblock( const uint64_t addr, const uint16_t val) { const uint32_t upper = __upper32(addr); __attribute((address_space(0))) volatile uint16_t* const lower = (__attribute((address_space(0))) volatile uint16_t*)__lower32(addr); uint32_t mstatus; __asm__ volatile( "csrrci %[mstatus], 0x300, 3" "\n\t" "csrw 0xbc0, zero\n\t" "s" "h" " %[val], 0(%[lower])\n\t" "csrw 0xbc0, zero\n\t" "csrrw x0, 0x300, %[mstatus]" : [mstatus] "+&r" (mstatus) : [upper] "r" (upper), [val] "r" (val), [lower] "r" (lower) : "memory" ); return 0; } inline static void hero_store_uint16 (const uint64_t addr, const uint16_t val) { const int res = hero_store_uint16_noblock(addr, val); }
inline static int hero_load_uint8_noblock( const uint64_t addr, __attribute((address_space(0))) uint8_t* const val) { const uint32_t upper = __upper32(addr); __attribute((address_space(0))) volatile uint8_t* const lower = (__attribute((address_space(0))) volatile uint8_t*)__lower32(addr); uint32_t mstatus; uint8_t reg; __asm__ volatile( "csrrci %[mstatus], 0x300, 3" "\n\t" "csrw 0xbc0, zero\n\t" "l" "b" "u" " %[reg], 0(%[lower])\n\t" "csrw 0xbc0, zero\n\t" "csrrw x0, 0x300, %[mstatus]" : [reg] "=&r" (reg), [mstatus] "+&r" (mstatus) : [upper] "r" (upper), [lower] "r" (lower) : "memory" ); *val = reg; return 0; } inline static uint8_t hero_load_uint8(const uint64_t addr) { uint8_t val; const int res = hero_load_uint8_noblock(addr, (__attribute((address_space(0))) uint8_t*)&val); return val; } inline static int hero_store_uint8_noblock( const uint64_t addr, const uint8_t val) { const uint32_t upper = __upper32(addr); __attribute((address_space(0))) volatile uint8_t* const lower = (__attribute((address_space(0))) volatile uint8_t*)__lower32(addr); uint32_t mstatus; __asm__ volatile( "csrrci %[mstatus], 0x300, 3" "\n\t" "csrw 0xbc0, zero\n\t" "s" "b" " %[val], 0(%[lower])\n\t" "csrw 0xbc0, zero\n\t" "csrrw x0, 0x300, %[mstatus]" : [mstatus] "+&r" (mstatus) : [upper] "r" (upper), [val] "r" (val), [lower] "r" (lower) : "memory" ); return 0; } inline static void hero_store_uint8 (const uint64_t addr, const uint8_t val) { const int res = hero_store_uint8_noblock(addr, val); }

uint64_t hero_load_uint64(const uint64_t addr)
{
  const uint32_t lower = hero_load_uint32(addr);
  const uint32_t upper = hero_load_uint32(addr+4);
  uint64_t ret_val = ((uint64_t)upper << 32) | lower;

  return ret_val;
}

void hero_store_uint64(const uint64_t addr, const uint64_t val)
{
  const uint32_t lower = (uint32_t)val;
  hero_store_uint32(addr, lower);
  const uint32_t upper = (uint32_t)(val >> 32);
  hero_store_uint32(addr+4, upper);
}

int hero_load_uint64_noblock(const uint64_t addr, __attribute((address_space(0))) uint64_t* const val)
{
  __attribute((address_space(0))) uint32_t* const lower = (__attribute((address_space(0))) uint32_t*)val;
  const int res_lower = hero_load_uint32_noblock(addr, lower);
  __attribute((address_space(0))) uint32_t* const upper = lower + 1;
  const int res_upper = hero_load_uint32_noblock(addr+4, upper);
  return res_lower | res_upper;
}

int hero_store_uint64_noblock(const uint64_t addr, const uint64_t val)
{
  const uint32_t lower = (uint32_t)val;
  const int res_lower = hero_store_uint32_noblock(addr, lower);
  const uint32_t upper = (uint32_t)(val >> 32);
  const int res_upper = hero_store_uint32_noblock(addr+4, upper);
  return res_lower | res_upper;
}
#pragma omp end declare target

#pragma clang diagnostic pop
# 25 "POLYBENCH_GEMM_OMP.cpp" 2
}

# 1 "./include/POLYBENCH_GEMM_OMP.hpp" 1
# 1 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp" 1
# 16 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
# 1 "/scratch2/msc24h6/RAJAPerf/tpl/RAJA/include/RAJA/util/types.hpp" 1
# 1004 "/scratch2/msc24h6/RAJAPerf/tpl/RAJA/include/RAJA/util/types.hpp"
extern "C" {
# 1 "/scratch2/msc24h6/hero-tools/install/lib/clang/15.0.0/include/stddef.h" 1 3
# 1006 "/scratch2/msc24h6/RAJAPerf/tpl/RAJA/include/RAJA/util/types.hpp" 2
}

namespace RAJA
{

using Index_type =int;

}
# 17 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp" 2
# 35 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
namespace rajaperf
{
# 49 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using RepIndex_type = volatile int;
# 59 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using Index_type = RAJA::Index_type;

using Index_ptr = Index_type*;
# 71 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using Size_type = size_t;
# 81 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using Int_type = int;

using Int_ptr = Int_type*;
# 93 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using Checksum_type = long double;
# 107 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using Real_type = double;
# 122 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
using Real_ptr = Real_type*;
# 135 "/scratch2/msc24h6/RAJAPerf/src/common/RPTypes.hpp"
}
# 2 "./include/POLYBENCH_GEMM_OMP.hpp" 2
# 1 "/scratch2/msc24h6/RAJAPerf/src/common/KernelBase.hpp" 1
# 12 "/scratch2/msc24h6/RAJAPerf/src/common/KernelBase.hpp"
# 1 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp" 1
# 31 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
namespace rajaperf
{

class KernelBase;
class RunParams;
# 50 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
enum GroupID {

  Basic = 0,
  Lcals,
  Polybench,
  Stream,
  Apps,
  Algorithm,
  Comm,

  NumGroups

};
# 78 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
enum KernelID {




  Basic_ARRAY_OF_PTRS = 0,
  Basic_COPY8,
  Basic_DAXPY,
  Basic_DAXPY_ATOMIC,
  Basic_IF_QUAD,
  Basic_INDEXLIST,
  Basic_INDEXLIST_3LOOP,
  Basic_INIT3,
  Basic_INIT_VIEW1D,
  Basic_INIT_VIEW1D_OFFSET,
  Basic_MAT_MAT_SHARED,
  Basic_MULADDSUB,
  Basic_NESTED_INIT,
  Basic_PI_ATOMIC,
  Basic_PI_REDUCE,
  Basic_REDUCE3_INT,
  Basic_REDUCE_STRUCT,
  Basic_TRAP_INT,
  Basic_MULTI_REDUCE,




  Lcals_DIFF_PREDICT,
  Lcals_EOS,
  Lcals_FIRST_DIFF,
  Lcals_FIRST_MIN,
  Lcals_FIRST_SUM,
  Lcals_GEN_LIN_RECUR,
  Lcals_HYDRO_1D,
  Lcals_HYDRO_2D,
  Lcals_INT_PREDICT,
  Lcals_PLANCKIAN,
  Lcals_TRIDIAG_ELIM,




  Polybench_2MM,
  Polybench_3MM,
  Polybench_ADI,
  Polybench_ATAX,
  Polybench_FDTD_2D,
  Polybench_FLOYD_WARSHALL,
  Polybench_GEMM,
  Polybench_GEMVER,
  Polybench_GESUMMV,
  Polybench_HEAT_3D,
  Polybench_JACOBI_1D,
  Polybench_JACOBI_2D,
  Polybench_MVT,




  Stream_ADD,
  Stream_COPY,
  Stream_DOT,
  Stream_MUL,
  Stream_TRIAD,




  Apps_CONVECTION3DPA,
  Apps_DEL_DOT_VEC_2D,
  Apps_DIFFUSION3DPA,
  Apps_EDGE3D,
  Apps_ENERGY,
  Apps_FIR,
  Apps_LTIMES,
  Apps_LTIMES_NOVIEW,
  Apps_MASS3DEA,
  Apps_MASS3DPA,
  Apps_MATVEC_3D_STENCIL,
  Apps_NODAL_ACCUMULATION_3D,
  Apps_PRESSURE,
  Apps_VOL3D,
  Apps_ZONAL_ACCUMULATION_3D,




  Algorithm_SCAN,
  Algorithm_SORT,
  Algorithm_SORTPAIRS,
  Algorithm_REDUCE_SUM,
  Algorithm_MEMSET,
  Algorithm_MEMCPY,
  Algorithm_ATOMIC,
  Algorithm_HISTOGRAM,




  Comm_HALO_PACKING,
  Comm_HALO_PACKING_FUSED,






  NumKernels

};
# 203 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
enum VariantID {

  Base_Seq = 0,
  Lambda_Seq,
  RAJA_Seq,

  Base_OpenMP,
  Lambda_OpenMP,
  RAJA_OpenMP,

  Base_OpenMPTarget,
  RAJA_OpenMPTarget,

  Base_CUDA,
  Lambda_CUDA,
  RAJA_CUDA,

  Base_HIP,
  Lambda_HIP,
  RAJA_HIP,

  Kokkos_Lambda,

  Base_SYCL,
  RAJA_SYCL,

  NumVariants

};
# 246 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
enum FeatureID {

  Forall = 0,
  Kernel,
  Launch,

  Sort,
  Scan,
  Workgroup,

  Reduction,
  Atomic,

  View,





  NumFeatures

};
# 282 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
enum struct Complexity {

  N = 0,

  N_logN,

  N_to_the_three_halves,

  N_to_the_two_thirds,

  NumComplexities

};
# 310 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
enum struct DataSpace {

  Host = 0,

  Omp,

  OmpTarget,

  CudaPinned,
  CudaManaged,
  CudaManagedHostPreferred,
  CudaManagedDevicePreferred,
  CudaManagedHostPreferredDeviceAccessed,
  CudaManagedDevicePreferredHostAccessed,
  CudaDevice,

  HipHostAdviseFine,
  HipHostAdviseCoarse,
  HipPinned,
  HipPinnedFine,
  HipPinnedCoarse,
  HipManaged,
  HipManagedAdviseFine,
  HipManagedAdviseCoarse,
  HipDevice,
  HipDeviceFine,

  SyclPinned,
  SyclManaged,
  SyclDevice,

  NumSpaces,

  Copy,

  EndPseudoSpaces

};
# 506 "/scratch2/msc24h6/RAJAPerf/src/common/RAJAPerfSuite.hpp"
}
# 13 "/scratch2/msc24h6/RAJAPerf/src/common/KernelBase.hpp" 2
# 79 "/scratch2/msc24h6/RAJAPerf/src/common/KernelBase.hpp"
extern "C" {

}


namespace rajaperf {
# 615 "/scratch2/msc24h6/RAJAPerf/src/common/KernelBase.hpp"
class KernelBase
{
public:



};

}
# 3 "./include/POLYBENCH_GEMM_OMP.hpp" 2



namespace rajaperf
{

class POLYBENCH_GEMM_OMPTarget{
    public:
        POLYBENCH_GEMM_OMPTarget(Real_ptr m_A, Real_ptr m_B, Real_ptr m_C,
                            Real_type m_alpha, Real_type m_beta,
                            Index_type m_ni,Index_type m_nj,Index_type m_nk,
                            Index_type m_run_reps);
        void POLYBENCH_GEMM_OMP();
        void POLYBENCH_GEMM_OMP_opt();
        void POLYBENCH_GEMM_OMP_opt_one_core();
        void POLYBENCH_GEMM_OMP_opt_one_team();
        void POLYBENCH_GEMM_OMP_opt_one_team_one_core();
        void OMPTarget_initialization();
        void OMPTarget_conclusion();


        Real_ptr A,B,C;
        Real_type alpha, beta;
        Index_type NI, NJ, NK, run_reps;
        uint64_t A_phys, B_phys, C_phys;
        double *A_virt, *B_virt, *C_virt;

};

}
# 28 "POLYBENCH_GEMM_OMP.cpp" 2


#pragma omp declare target

double C_loc[2][0x4000/8] __attribute__((section(".l1")));
double A_loc[2][0x4000/8] __attribute__((section(".l1")));
double B_loc[2][0x4000/8] __attribute__((section(".l1")));

#pragma omp end declare target


namespace rajaperf
{

    POLYBENCH_GEMM_OMPTarget::POLYBENCH_GEMM_OMPTarget(Real_ptr m_A, Real_ptr m_B, Real_ptr m_C,
                                    Real_type m_alpha,
                                    Real_type m_beta,
                                    Index_type m_ni,
                                    Index_type m_nj,
                                    Index_type m_nk,
                                    Index_type m_run_reps)
                                    :A((Real_ptr)m_A),
                                    B((Real_ptr)m_B),
                                    C((Real_ptr)m_C),
                                    alpha((Real_type)m_alpha),
                                    beta((Real_type)m_beta),
                                    NI((Index_type)m_ni),
                                    NJ((Index_type)m_nj),
                                    NK((Index_type)m_nk),
                                    run_reps((Index_type)m_run_reps){}


    void POLYBENCH_GEMM_OMPTarget::OMPTarget_initialization(){



#pragma omp target device(1)
        {
            asm volatile("nop");
        }
# 99 "POLYBENCH_GEMM_OMP.cpp"
    }

    void POLYBENCH_GEMM_OMPTarget::POLYBENCH_GEMM_OMP(){


        uint64_t A_phys_, B_phys_, C_phys_;
        double alpha_ = alpha;
        double beta_ = beta;
        A_phys_ = A_phys;
        B_phys_ = B_phys;
        C_phys_ = C_phys;
        Index_type NI_ = NI;
        Index_type NJ_ = NJ;
        Index_type NK_ = NK;

        for (RepIndex_type irep = 0; irep < run_reps; ++irep) {


#pragma omp target teams device(1) num_teams(2) map (to: A_phys_, B_phys_, C_phys_, alpha_, beta_, NI_, NJ_, NK_)
            {
                (volatile void) A_phys_;
                (volatile void) B_phys_;
                (volatile void) C_phys_;
                (volatile void) alpha_;
                (volatile void) beta_;
                (volatile void) NI_;
                (volatile void) NJ_;
                (volatile void) NK_;



#pragma omp distribute parallel for
                {
                    for(int i=0; i<NI_; i++){
                        for(int j=0; j<NJ_; j++){
                            double par2 = beta_*((double *)C_phys_)[i*NJ_ + j];
                            double partial = 0.0;
                            for(int k=0; k<NK_; k++){
                                double par = ((double *)A_phys_)[i*NK_ + k]*((double*)B_phys_)[k*NJ_ + j];
                                partial = par + partial;
                            }
                            double par = alpha_*partial;
                            ((double *)C_phys_)[i*NJ_ + j] = par + par2;
                        }
                    }
                }



            }

        }

    }


    void POLYBENCH_GEMM_OMPTarget::POLYBENCH_GEMM_OMP_opt(){


        uint64_t A_phys_, B_phys_, C_phys_;
        double alpha_ = alpha;
        double beta_ = beta;
        A_phys_ = A_phys;
        B_phys_ = B_phys;
        C_phys_ = C_phys;
        Index_type NI_ = NI;
        Index_type NJ_ = NJ;
        Index_type NK_ = NK;

        for (RepIndex_type irep = 0; irep < run_reps; ++irep) {


#pragma omp target teams device(1) num_teams(2) map (to: A_phys_, B_phys_, C_phys_, alpha_, beta_, NI_, NJ_, NK_)
            {
                (volatile void) A_phys_;
                (volatile void) B_phys_;
                (volatile void) C_phys_;
                (volatile void) alpha_;
                (volatile void) beta_;
                (volatile void) NI_;
                (volatile void) NJ_;
                (volatile void) NK_;


#pragma omp parallel
                {

                    uint32_t I_tiling = (NI_%32==0) ? NI_/32 : NI_/32 + 1;
                    uint32_t J_tiling = (NJ_%32==0) ? NJ_/32 : NJ_/32 + 1;
                    uint32_t K_tiling = (NK_%64==0) ? NK_/64 : NK_/64 + 1;


                    uint32_t start_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });


                    uint32_t cluster_idx = snrt_cluster_idx();
                    uint32_t global_core_idx = snrt_global_core_idx();
                    uint32_t cluster_core_idx = snrt_cluster_core_idx();


                    uint32_t k_iters = K_tiling;
                    uint32_t dim_k_stride = NK_ / k_iters;


                    uint32_t i_iters = I_tiling;
                    uint32_t dim_i_stride = NI_ / i_iters;
                    uint32_t start_index_I = dim_i_stride/2 * cluster_idx;
                    uint32_t core_size_I = (dim_i_stride/4);
                    uint32_t loc_start_index_i = (cluster_core_idx==0) ? 0 : (core_size_I);


                    uint32_t j_iters = J_tiling;
                    uint32_t dim_j_stride = NJ_ / j_iters;




                    uint32_t curr_A_B =0;
                    uint32_t curr_C =0;


                    uint32_t size_C_transfer = dim_j_stride*sizeof(double);


                    uint32_t size_A_transfer = NK_*sizeof(double)/k_iters;


                    uint32_t size_B_transfer = dim_j_stride*sizeof(double);


                    if(cluster_core_idx==0){
                        snrt_dma_start_2d_wideptr( (uint64_t)C_loc[0],
                                                (uint64_t)C_phys_ + start_index_I*NJ_*sizeof(double),
                                                size_C_transfer,
                                                size_C_transfer,
                                                NJ_*sizeof(double),
                                                (dim_i_stride/2)
                        );

                        snrt_dma_start_2d_wideptr( (uint64_t)A_loc[0],
                                                    (uint64_t)A_phys_ + start_index_I*NK_*sizeof(double),
                                                    size_A_transfer,
                                                    size_A_transfer,
                                                    NK_*sizeof(double),
                                                    (dim_i_stride/2)
                        );

                        snrt_dma_start_2d_wideptr( (uint64_t)B_loc[0],
                                                    (uint64_t)B_phys_,
                                                    size_B_transfer,
                                                    size_B_transfer,
                                                    NJ_*sizeof(double),
                                                    dim_k_stride
                        );

                        snrt_dma_wait_all();

                    }

                    snrt_cluster_hw_barrier();

                    for(int i=0;i<i_iters;i++){
                        for(int j=0;j<j_iters;j++){

                            double *C_curr[1];
                            double *C_next[1];
                            if(curr_C == 0){
                                C_curr[0] = C_loc[0];
                                C_next[0] = C_loc[1];
                                curr_C = 1;
                            }else{
                                C_curr[0] = C_loc[1];
                                C_next[0] = C_loc[0];
                                curr_C = 0;
                            }


                            if(cluster_core_idx==0){

                                if(j!=j_iters-1){
                                    snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                        (uint64_t)C_phys_ + (start_index_I*NJ_ + i*dim_i_stride*NJ_ + (j+1)*dim_j_stride)*sizeof(double),
                                                        size_C_transfer,
                                                        size_C_transfer,
                                                        NJ_*sizeof(double),
                                                        (dim_i_stride/2)
                                    );


                                }else if(i!=i_iters-1){
                                    snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                            (uint64_t)C_phys_ + (start_index_I*NJ_ + (i+1)*dim_i_stride*NJ_)*sizeof(double),
                                                            size_C_transfer,
                                                            size_C_transfer,
                                                            NJ_*sizeof(double),
                                                            (dim_i_stride/2)
                                    );
                                }

                            }

                            snrt_cluster_hw_barrier();


                            for(int k=0;k<k_iters;k++){

                                double *A_curr[1];
                                double *A_next[1];
                                double *B_curr[1];
                                double *B_next[1];

                                if(curr_A_B == 0){
                                    A_curr[0] = A_loc[0];
                                    A_next[0] = A_loc[1];
                                    B_curr[0] = B_loc[0];
                                    B_next[0] = B_loc[1];
                                    curr_A_B = 1;
                                }else{
                                    A_curr[0] = A_loc[1];
                                    A_next[0] = A_loc[0];
                                    B_curr[0] = B_loc[1];
                                    B_next[0] = B_loc[0];
                                    curr_A_B = 0;
                                }

                                if(cluster_core_idx==0){
                                    if(k!=0 || k_iters==1){
                                        snrt_dma_wait_all();
                                    }

                                    if(k!=k_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                                    (uint64_t)A_phys_ + (start_index_I*NK_ + (k+1)*dim_k_stride + i*dim_i_stride*NK_)*sizeof(double),
                                                                    size_A_transfer,
                                                                    size_A_transfer,
                                                                    NK_*sizeof(double),
                                                                    (dim_i_stride/2)
                                        );

                                    }else if(j!=j_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                                    (uint64_t)A_phys_ + (start_index_I*NK_ + i*dim_i_stride*NK_)*sizeof(double),
                                                                    size_A_transfer,
                                                                    size_A_transfer,
                                                                    NK_*sizeof(double),
                                                                    (dim_i_stride/2)
                                        );
                                    }else if(i!=i_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                                    (uint64_t)A_phys_ + (start_index_I*NK_ + (i+1)*dim_i_stride*NK_)*sizeof(double),
                                                                    size_A_transfer,
                                                                    size_A_transfer,
                                                                    NK_*sizeof(double),
                                                                    (dim_i_stride/2)
                                        );
                                    }

                                    if(k!=k_iters-1){

                                        snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                                    (uint64_t)B_phys_ + ((k+1)*dim_k_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                                    size_B_transfer,
                                                                    size_B_transfer,
                                                                    NJ_*sizeof(double),
                                                                    dim_k_stride
                                        );


                                    }else if(j!=j_iters-1){

                                        snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                                    (uint64_t)B_phys_ + (j+1)*dim_j_stride*sizeof(double),
                                                                    size_B_transfer,
                                                                    size_B_transfer,
                                                                    NJ_*sizeof(double),
                                                                    dim_k_stride
                                        );


                                    }else if(i!=i_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                                    (uint64_t)B_phys_,
                                                                    size_B_transfer,
                                                                    size_B_transfer,
                                                                    NJ_*sizeof(double),
                                                                    dim_k_stride
                                        );

                                    }

                                }

                                snrt_cluster_hw_barrier();

                                uint32_t first_iter = (k==0) ? 1 : 0;

                                gemm_4xVL((double __attribute__((address_space(1))) *)C_curr[0], (double __attribute__((address_space(1))) *)A_curr[0], (double __attribute__((address_space(1))) *)B_curr[0],
                                                    loc_start_index_i, loc_start_index_i+core_size_I, dim_k_stride, dim_j_stride, alpha_, beta_,first_iter);


                                snrt_cluster_hw_barrier();


                            }
                            if(cluster_core_idx==0){

                                snrt_dma_start_2d_wideptr( (uint64_t)C_phys_ + (start_index_I*NJ_ + i*dim_i_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                            (uint64_t)C_curr[0],
                                                            size_C_transfer,
                                                            NJ_*sizeof(double),
                                                            size_C_transfer,
                                                            (dim_i_stride/2)

                                );
                            }
                        }
                    }

                    if(cluster_core_idx==0){
                        snrt_dma_wait_all();
                    }

                    uint32_t end_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });


                    snrt_cluster_hw_barrier();

                }


            }
        }

    }

    void POLYBENCH_GEMM_OMPTarget::POLYBENCH_GEMM_OMP_opt_one_core(){


        uint64_t A_phys_, B_phys_, C_phys_;
        double alpha_ = alpha;
        double beta_ = beta;
        A_phys_ = A_phys;
        B_phys_ = B_phys;
        C_phys_ = C_phys;
        Index_type NI_ = NI;
        Index_type NJ_ = NJ;
        Index_type NK_ = NK;

        for (RepIndex_type irep = 0; irep < run_reps; ++irep) {


#pragma omp target teams device(1) num_teams(2) map (to: A_phys_, B_phys_, C_phys_, alpha_, beta_, NI_, NJ_, NK_)
            {
                (volatile void) A_phys_;
                (volatile void) B_phys_;
                (volatile void) C_phys_;
                (volatile void) alpha_;
                (volatile void) beta_;
                (volatile void) NI_;
                (volatile void) NJ_;
                (volatile void) NK_;




                uint32_t I_tiling = (NI_%32==0) ? NI_/32 : NI_/32 + 1;
                uint32_t J_tiling = (NJ_%32==0) ? NJ_/32 : NJ_/32 + 1;
                uint32_t K_tiling = (NK_%64==0) ? NK_/64 : NK_/64 + 1;


                uint32_t start_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });


                uint32_t cluster_idx = snrt_cluster_idx();
                uint32_t global_core_idx = snrt_global_core_idx();


                uint32_t k_iters = K_tiling;
                uint32_t dim_k_stride = NK_ / k_iters;


                uint32_t i_iters = I_tiling;
                uint32_t dim_i_stride = NI_ / i_iters;
                uint32_t start_index_I = dim_i_stride/2 * cluster_idx;


                uint32_t j_iters = J_tiling;
                uint32_t dim_j_stride = NJ_ / j_iters;




                uint32_t curr_A_B =0;
                uint32_t curr_C =0;


                uint32_t size_C_transfer = dim_j_stride*sizeof(double);


                uint32_t size_A_transfer = NK_*sizeof(double)/k_iters;


                uint32_t size_B_transfer = dim_j_stride*sizeof(double);


                snrt_dma_start_2d_wideptr( (uint64_t)C_loc[0],
                                        (uint64_t)C_phys_ + start_index_I*NJ_*sizeof(double),
                                        size_C_transfer,
                                        size_C_transfer,
                                        NJ_*sizeof(double),
                                        (dim_i_stride/2)
                );

                snrt_dma_start_2d_wideptr( (uint64_t)A_loc[0],
                                            (uint64_t)A_phys_ + start_index_I*NK_*sizeof(double),
                                            size_A_transfer,
                                            size_A_transfer,
                                            NK_*sizeof(double),
                                            (dim_i_stride/2)
                );

                snrt_dma_start_2d_wideptr( (uint64_t)B_loc[0],
                                            (uint64_t)B_phys_,
                                            size_B_transfer,
                                            size_B_transfer,
                                            NJ_*sizeof(double),
                                            dim_k_stride
                );

                snrt_dma_wait_all();


                for(int i=0;i<i_iters;i++){
                    for(int j=0;j<j_iters;j++){

                        double *C_curr[1];
                        double *C_next[1];
                        if(curr_C == 0){
                            C_curr[0] = C_loc[0];
                            C_next[0] = C_loc[1];
                            curr_C = 1;
                        }else{
                            C_curr[0] = C_loc[1];
                            C_next[0] = C_loc[0];
                            curr_C = 0;
                        }



                        if(j!=j_iters-1){
                            snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                (uint64_t)C_phys_ + (start_index_I*NJ_ + i*dim_i_stride*NJ_ + (j+1)*dim_j_stride)*sizeof(double),
                                                size_C_transfer,
                                                size_C_transfer,
                                                NJ_*sizeof(double),
                                                (dim_i_stride/2)
                            );


                        }else if(i!=i_iters-1){
                            snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                    (uint64_t)C_phys_ + (start_index_I*NJ_ + (i+1)*dim_i_stride*NJ_)*sizeof(double),
                                                    size_C_transfer,
                                                    size_C_transfer,
                                                    NJ_*sizeof(double),
                                                    (dim_i_stride/2)
                            );
                        }



                        for(int k=0;k<k_iters;k++){

                            double *A_curr[1];
                            double *A_next[1];
                            double *B_curr[1];
                            double *B_next[1];

                            if(curr_A_B == 0){
                                A_curr[0] = A_loc[0];
                                A_next[0] = A_loc[1];
                                B_curr[0] = B_loc[0];
                                B_next[0] = B_loc[1];
                                curr_A_B = 1;
                            }else{
                                A_curr[0] = A_loc[1];
                                A_next[0] = A_loc[0];
                                B_curr[0] = B_loc[1];
                                B_next[0] = B_loc[0];
                                curr_A_B = 0;
                            }

                            if(k!=0 || k_iters==1){
                                snrt_dma_wait_all();
                            }

                            if(k!=k_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                            (uint64_t)A_phys_ + (start_index_I*NK_ + (k+1)*dim_k_stride + i*dim_i_stride*NK_)*sizeof(double),
                                                            size_A_transfer,
                                                            size_A_transfer,
                                                            NK_*sizeof(double),
                                                            (dim_i_stride/2)
                                );

                            }else if(j!=j_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                            (uint64_t)A_phys_ + (start_index_I*NK_ + i*dim_i_stride*NK_)*sizeof(double),
                                                            size_A_transfer,
                                                            size_A_transfer,
                                                            NK_*sizeof(double),
                                                            (dim_i_stride/2)
                                );
                            }else if(i!=i_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                            (uint64_t)A_phys_ + (start_index_I*NK_ + (i+1)*dim_i_stride*NK_)*sizeof(double),
                                                            size_A_transfer,
                                                            size_A_transfer,
                                                            NK_*sizeof(double),
                                                            (dim_i_stride/2)
                                );
                            }

                            if(k!=k_iters-1){

                                snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                            (uint64_t)B_phys_ + ((k+1)*dim_k_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                            size_B_transfer,
                                                            size_B_transfer,
                                                            NJ_*sizeof(double),
                                                            dim_k_stride
                                );


                            }else if(j!=j_iters-1){

                                snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                            (uint64_t)B_phys_ + (j+1)*dim_j_stride*sizeof(double),
                                                            size_B_transfer,
                                                            size_B_transfer,
                                                            NJ_*sizeof(double),
                                                            dim_k_stride
                                );


                            }else if(i!=i_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                            (uint64_t)B_phys_,
                                                            size_B_transfer,
                                                            size_B_transfer,
                                                            NJ_*sizeof(double),
                                                            dim_k_stride
                                );

                            }


                            uint32_t first_iter = (k==0) ? 1 : 0;

                            gemm_4xVL((double __attribute__((address_space(1))) *)C_curr[0], (double __attribute__((address_space(1))) *)A_curr[0], (double __attribute__((address_space(1))) *)B_curr[0],
                                                0, dim_i_stride/2, dim_k_stride, dim_j_stride, alpha_, beta_,first_iter);


                        }

                        snrt_dma_start_2d_wideptr( (uint64_t)C_phys_ + (start_index_I*NJ_ + i*dim_i_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                    (uint64_t)C_curr[0],
                                                    size_C_transfer,
                                                    NJ_*sizeof(double),
                                                    size_C_transfer,
                                                    (dim_i_stride/2)

                        );
                    }
                }

                snrt_dma_wait_all();

                uint32_t end_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });




            }
        }

    }


    void POLYBENCH_GEMM_OMPTarget::POLYBENCH_GEMM_OMP_opt_one_team(){


        uint64_t A_phys_, B_phys_, C_phys_;
        double alpha_ = alpha;
        double beta_ = beta;
        A_phys_ = A_phys;
        B_phys_ = B_phys;
        C_phys_ = C_phys;
        Index_type NI_ = NI;
        Index_type NJ_ = NJ;
        Index_type NK_ = NK;

        for (RepIndex_type irep = 0; irep < run_reps; ++irep) {


#pragma omp target teams device(1) num_teams(1) map (to: A_phys_, B_phys_, C_phys_, alpha_, beta_, NI_, NJ_, NK_)
            {
                (volatile void) A_phys_;
                (volatile void) B_phys_;
                (volatile void) C_phys_;
                (volatile void) alpha_;
                (volatile void) beta_;
                (volatile void) NI_;
                (volatile void) NJ_;
                (volatile void) NK_;


#pragma omp parallel
                {

                    uint32_t I_tiling = (NI_%32==0) ? NI_/32 : NI_/32 + 1;
                    uint32_t J_tiling = (NJ_%32==0) ? NJ_/32 : NJ_/32 + 1;
                    uint32_t K_tiling = (NK_%64==0) ? NK_/64 : NK_/64 + 1;


                    uint32_t start_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });


                    uint32_t cluster_idx = snrt_cluster_idx();
                    uint32_t global_core_idx = snrt_global_core_idx();
                    uint32_t cluster_core_idx = snrt_cluster_core_idx();


                    uint32_t k_iters = K_tiling;
                    uint32_t dim_k_stride = NK_ / k_iters;


                    uint32_t i_iters = I_tiling;
                    uint32_t dim_i_stride = NI_ / i_iters;

                    uint32_t core_size_I = (dim_i_stride/2);
                    uint32_t loc_start_index_i = (cluster_core_idx==0) ? 0 : (core_size_I);



                    uint32_t j_iters = J_tiling;
                    uint32_t dim_j_stride = NJ_ / j_iters;




                    uint32_t curr_A_B =0;
                    uint32_t curr_C =0;


                    uint32_t size_C_transfer = dim_j_stride*sizeof(double);


                    uint32_t size_A_transfer = NK_*sizeof(double)/k_iters;


                    uint32_t size_B_transfer = dim_j_stride*sizeof(double);


                    if(cluster_core_idx==0){
                        snrt_dma_start_2d_wideptr( (uint64_t)C_loc[0],
                                                (uint64_t)C_phys_,
                                                size_C_transfer,
                                                size_C_transfer,
                                                NJ_*sizeof(double),
                                                (dim_i_stride)
                        );

                        snrt_dma_start_2d_wideptr( (uint64_t)A_loc[0],
                                                    (uint64_t)A_phys_ ,
                                                    size_A_transfer,
                                                    size_A_transfer,
                                                    NK_*sizeof(double),
                                                    (dim_i_stride)
                        );

                        snrt_dma_start_2d_wideptr( (uint64_t)B_loc[0],
                                                    (uint64_t)B_phys_,
                                                    size_B_transfer,
                                                    size_B_transfer,
                                                    NJ_*sizeof(double),
                                                    dim_k_stride
                        );

                        snrt_dma_wait_all();

                    }

                    snrt_cluster_hw_barrier();

                    for(int i=0;i<i_iters;i++){
                        for(int j=0;j<j_iters;j++){

                            double *C_curr[1];
                            double *C_next[1];
                            if(curr_C == 0){
                                C_curr[0] = C_loc[0];
                                C_next[0] = C_loc[1];
                                curr_C = 1;
                            }else{
                                C_curr[0] = C_loc[1];
                                C_next[0] = C_loc[0];
                                curr_C = 0;
                            }


                            if(cluster_core_idx==0){

                                if(j!=j_iters-1){
                                    snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                        (uint64_t)C_phys_ + (i*dim_i_stride*NJ_ + (j+1)*dim_j_stride)*sizeof(double),
                                                        size_C_transfer,
                                                        size_C_transfer,
                                                        NJ_*sizeof(double),
                                                        (dim_i_stride)
                                    );


                                }else if(i!=i_iters-1){
                                    snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                            (uint64_t)C_phys_ + ((i+1)*dim_i_stride*NJ_)*sizeof(double),
                                                            size_C_transfer,
                                                            size_C_transfer,
                                                            NJ_*sizeof(double),
                                                            (dim_i_stride)
                                    );
                                }

                            }

                            snrt_cluster_hw_barrier();


                            for(int k=0;k<k_iters;k++){

                                double *A_curr[1];
                                double *A_next[1];
                                double *B_curr[1];
                                double *B_next[1];

                                if(curr_A_B == 0){
                                    A_curr[0] = A_loc[0];
                                    A_next[0] = A_loc[1];
                                    B_curr[0] = B_loc[0];
                                    B_next[0] = B_loc[1];
                                    curr_A_B = 1;
                                }else{
                                    A_curr[0] = A_loc[1];
                                    A_next[0] = A_loc[0];
                                    B_curr[0] = B_loc[1];
                                    B_next[0] = B_loc[0];
                                    curr_A_B = 0;
                                }

                                if(cluster_core_idx==0){
                                    if(k!=0 || k_iters==1){
                                        snrt_dma_wait_all();
                                    }

                                    if(k!=k_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                                    (uint64_t)A_phys_ + ((k+1)*dim_k_stride + i*dim_i_stride*NK_)*sizeof(double),
                                                                    size_A_transfer,
                                                                    size_A_transfer,
                                                                    NK_*sizeof(double),
                                                                    (dim_i_stride)
                                        );

                                    }else if(j!=j_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                                    (uint64_t)A_phys_ + (i*dim_i_stride*NK_)*sizeof(double),
                                                                    size_A_transfer,
                                                                    size_A_transfer,
                                                                    NK_*sizeof(double),
                                                                    (dim_i_stride)
                                        );
                                    }else if(i!=i_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                                    (uint64_t)A_phys_ + ((i+1)*dim_i_stride*NK_)*sizeof(double),
                                                                    size_A_transfer,
                                                                    size_A_transfer,
                                                                    NK_*sizeof(double),
                                                                    (dim_i_stride)
                                        );
                                    }

                                    if(k!=k_iters-1){

                                        snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                                    (uint64_t)B_phys_ + ((k+1)*dim_k_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                                    size_B_transfer,
                                                                    size_B_transfer,
                                                                    NJ_*sizeof(double),
                                                                    dim_k_stride
                                        );


                                    }else if(j!=j_iters-1){

                                        snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                                    (uint64_t)B_phys_ + (j+1)*dim_j_stride*sizeof(double),
                                                                    size_B_transfer,
                                                                    size_B_transfer,
                                                                    NJ_*sizeof(double),
                                                                    dim_k_stride
                                        );


                                    }else if(i!=i_iters-1){
                                        snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                                    (uint64_t)B_phys_,
                                                                    size_B_transfer,
                                                                    size_B_transfer,
                                                                    NJ_*sizeof(double),
                                                                    dim_k_stride
                                        );

                                    }

                                }

                                snrt_cluster_hw_barrier();

                                uint32_t first_iter = (k==0) ? 1 : 0;

                                gemm_4xVL((double __attribute__((address_space(1))) *)C_curr[0], (double __attribute__((address_space(1))) *)A_curr[0], (double __attribute__((address_space(1))) *)B_curr[0],
                                                    loc_start_index_i, loc_start_index_i + core_size_I, dim_k_stride, dim_j_stride, alpha_, beta_,first_iter);


                                snrt_cluster_hw_barrier();


                            }
                            if(cluster_core_idx==0){

                                snrt_dma_start_2d_wideptr( (uint64_t)C_phys_ + (i*dim_i_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                            (uint64_t)C_curr[0],
                                                            size_C_transfer,
                                                            NJ_*sizeof(double),
                                                            size_C_transfer,
                                                            (dim_i_stride)

                                );
                            }
                        }
                    }

                    if(cluster_core_idx==0){
                        snrt_dma_wait_all();
                    }

                    uint32_t end_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });


                    snrt_cluster_hw_barrier();

                }


            }
        }

    }

void POLYBENCH_GEMM_OMPTarget::POLYBENCH_GEMM_OMP_opt_one_team_one_core(){


        uint64_t A_phys_, B_phys_, C_phys_;
        double alpha_ = alpha;
        double beta_ = beta;
        A_phys_ = A_phys;
        B_phys_ = B_phys;
        C_phys_ = C_phys;
        Index_type NI_ = NI;
        Index_type NJ_ = NJ;
        Index_type NK_ = NK;

        for (RepIndex_type irep = 0; irep < run_reps; ++irep) {


#pragma omp target teams device(1) num_teams(1) map (to: A_phys_, B_phys_, C_phys_, alpha_, beta_, NI_, NJ_, NK_)
            {
                (volatile void) A_phys_;
                (volatile void) B_phys_;
                (volatile void) C_phys_;
                (volatile void) alpha_;
                (volatile void) beta_;
                (volatile void) NI_;
                (volatile void) NJ_;
                (volatile void) NK_;




                uint32_t I_tiling = (NI_%32==0) ? NI_/32 : NI_/32 + 1;
                uint32_t J_tiling = (NJ_%32==0) ? NJ_/32 : NJ_/32 + 1;
                uint32_t K_tiling = (NK_%64==0) ? NK_/64 : NK_/64 + 1;


                uint32_t start_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });



                uint32_t k_iters = K_tiling;
                uint32_t dim_k_stride = NK_ / k_iters;


                uint32_t i_iters = I_tiling;
                uint32_t dim_i_stride = NI_ / i_iters;



                uint32_t j_iters = J_tiling;
                uint32_t dim_j_stride = NJ_ / j_iters;




                uint32_t curr_A_B =0;
                uint32_t curr_C =0;


                uint32_t size_C_transfer = dim_j_stride*sizeof(double);


                uint32_t size_A_transfer = NK_*sizeof(double)/k_iters;


                uint32_t size_B_transfer = dim_j_stride*sizeof(double);


                snrt_dma_start_2d_wideptr( (uint64_t)C_loc[0],
                                        (uint64_t)C_phys_,
                                        size_C_transfer,
                                        size_C_transfer,
                                        NJ_*sizeof(double),
                                        (dim_i_stride)
                );

                snrt_dma_start_2d_wideptr( (uint64_t)A_loc[0],
                                            (uint64_t)A_phys_ ,
                                            size_A_transfer,
                                            size_A_transfer,
                                            NK_*sizeof(double),
                                            (dim_i_stride)
                );

                snrt_dma_start_2d_wideptr( (uint64_t)B_loc[0],
                                            (uint64_t)B_phys_,
                                            size_B_transfer,
                                            size_B_transfer,
                                            NJ_*sizeof(double),
                                            dim_k_stride
                );

                snrt_dma_wait_all();

                for(int i=0;i<i_iters;i++){
                    for(int j=0;j<j_iters;j++){

                        double *C_curr[1];
                        double *C_next[1];
                        if(curr_C == 0){
                            C_curr[0] = C_loc[0];
                            C_next[0] = C_loc[1];
                            curr_C = 1;
                        }else{
                            C_curr[0] = C_loc[1];
                            C_next[0] = C_loc[0];
                            curr_C = 0;
                        }



                        if(j!=j_iters-1){
                            snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                (uint64_t)C_phys_ + (i*dim_i_stride*NJ_ + (j+1)*dim_j_stride)*sizeof(double),
                                                size_C_transfer,
                                                size_C_transfer,
                                                NJ_*sizeof(double),
                                                (dim_i_stride)
                            );


                        }else if(i!=i_iters-1){
                            snrt_dma_start_2d_wideptr( (uint64_t)C_next[0],
                                                    (uint64_t)C_phys_ + ((i+1)*dim_i_stride*NJ_)*sizeof(double),
                                                    size_C_transfer,
                                                    size_C_transfer,
                                                    NJ_*sizeof(double),
                                                    (dim_i_stride)
                            );
                        }

                        for(int k=0;k<k_iters;k++){

                            double *A_curr[1];
                            double *A_next[1];
                            double *B_curr[1];
                            double *B_next[1];

                            if(curr_A_B == 0){
                                A_curr[0] = A_loc[0];
                                A_next[0] = A_loc[1];
                                B_curr[0] = B_loc[0];
                                B_next[0] = B_loc[1];
                                curr_A_B = 1;
                            }else{
                                A_curr[0] = A_loc[1];
                                A_next[0] = A_loc[0];
                                B_curr[0] = B_loc[1];
                                B_next[0] = B_loc[0];
                                curr_A_B = 0;
                            }

                            if(k!=0 || k_iters==1){
                                snrt_dma_wait_all();
                            }

                            if(k!=k_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                            (uint64_t)A_phys_ + ((k+1)*dim_k_stride + i*dim_i_stride*NK_)*sizeof(double),
                                                            size_A_transfer,
                                                            size_A_transfer,
                                                            NK_*sizeof(double),
                                                            (dim_i_stride)
                                );

                            }else if(j!=j_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                            (uint64_t)A_phys_ + (i*dim_i_stride*NK_)*sizeof(double),
                                                            size_A_transfer,
                                                            size_A_transfer,
                                                            NK_*sizeof(double),
                                                            (dim_i_stride)
                                );
                            }else if(i!=i_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)A_next[0],
                                                            (uint64_t)A_phys_ + ((i+1)*dim_i_stride*NK_)*sizeof(double),
                                                            size_A_transfer,
                                                            size_A_transfer,
                                                            NK_*sizeof(double),
                                                            (dim_i_stride)
                                );
                            }

                            if(k!=k_iters-1){

                                snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                            (uint64_t)B_phys_ + ((k+1)*dim_k_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                            size_B_transfer,
                                                            size_B_transfer,
                                                            NJ_*sizeof(double),
                                                            dim_k_stride
                                );


                            }else if(j!=j_iters-1){

                                snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                            (uint64_t)B_phys_ + (j+1)*dim_j_stride*sizeof(double),
                                                            size_B_transfer,
                                                            size_B_transfer,
                                                            NJ_*sizeof(double),
                                                            dim_k_stride
                                );


                            }else if(i!=i_iters-1){
                                snrt_dma_start_2d_wideptr( (uint64_t)B_next[0],
                                                            (uint64_t)B_phys_,
                                                            size_B_transfer,
                                                            size_B_transfer,
                                                            NJ_*sizeof(double),
                                                            dim_k_stride
                                );

                            }

                            uint32_t first_iter = (k==0) ? 1 : 0;

                            gemm_4xVL((double __attribute__((address_space(1))) *)C_curr[0], (double __attribute__((address_space(1))) *)A_curr[0], (double __attribute__((address_space(1))) *)B_curr[0],
                                                0, dim_i_stride, dim_k_stride, dim_j_stride, alpha_, beta_,first_iter);

                        }

                        snrt_dma_start_2d_wideptr( (uint64_t)C_phys_ + (i*dim_i_stride*NJ_ + j*dim_j_stride)*sizeof(double),
                                                    (uint64_t)C_curr[0],
                                                    size_C_transfer,
                                                    NJ_*sizeof(double),
                                                    size_C_transfer,
                                                    (dim_i_stride)

                        );
                    }
                }

                snrt_dma_wait_all();

                uint32_t end_parall = ({ unsigned long __tmp; asm volatile ("csrr %0, " "mcycle" : "=r"(__tmp)); __tmp; });



            }
        }

    }


    void POLYBENCH_GEMM_OMPTarget::OMPTarget_conclusion(){
# 1225 "POLYBENCH_GEMM_OMP.cpp"
    }

}
